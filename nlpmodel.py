# -*- coding: utf-8 -*-
"""nlpmodel.ipynb
Created on Sat Jan 30 15:04:25 2021

@author: uday chowdary adusumilli
Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C2l-K3SrjH5ATjnB5R43qMcv6BI6FnHI
"""
import spacy
from spacy import displacy
from IPython .core.display import display, HTML
from spacy.pipeline import EntityRuler
import en_core_web_sm
def initialize():
  # corpus model - english, web, small size(limited)
  nlp = en_core_web_sm.load()
  # define rules for language analytics
  ruler1 = EntityRuler(nlp)
  pattern1 = [{"label": "FLEET", "pattern": "fleet"}, {"label": "FLEET", "pattern": "fleets"},
              {"label": "FLEET_id", "pattern": "fleet id"},
              {"label": "FLEET_col", "pattern": "fleet_id"},{"label": "FLEET_col", "pattern": "operator_name"},
              {"label": "FLEET_col", "pattern": "fleet_type"},{"label": "FLEET_col", "pattern": "capacity"},
              {"label": "FLEET_col", "pattern": "status"},
              
              {"label": "TRACK", "pattern": "courier"}, {"label": "TRACK", "pattern": "track"},
              {"label": "TRACK", "pattern": "package"}, {"label": "TRACK", "pattern": "packages"},

              {"label": "TRACK_col", "pattern": "track_id"}, {"label": "TRACK_col", "pattern": "source"},
              {"label": "TRACK_col", "pattern": "destination"}, {"label": "TRACK_col", "pattern": "duration"},
              {"label": "TRACK_col", "pattern": "load"}, {"label": "TRACK_col", "pattern": "operation status"},
              {"label": "TRACK_col", "pattern": "date of departure"},{"label": "TRACK_col", "pattern": "date of arrival"},

              {"label": "fleet_type", "pattern": "truck"}, {"label": "fleet_type", "pattern": "trucks"},
              {"label": "fleet_type", "pattern": "ship"}, {"label": "fleet_type", "pattern": "ships"},
              {"label": "fleet_type", "pattern": "cargos"}, {"label": "fleet_type", "pattern": "cargo"},
              
              {"label": "status", "pattern": "running"}, {"label": "status", "pattern": "cancelled"},
              {"label": "status", "pattern": "hold"},
              
              {"label": "fleet_id", "pattern": "12554"},{"label": "fleet_id", "pattern": "36589"},
              {"label": "fleet_id", "pattern": "45878"},{"label": "fleet_id", "pattern": "45877"},
              {"label": "fleet_id", "pattern": "67889"},
              
              {"label": "operator_name", "pattern": "indian airways"},
              {"label": "operator_name", "pattern": "hindustan shipping ltd"},
              {"label": "operator_name", "pattern": "rajubhai delivery services"},
              {"label": "operator_name", "pattern": "balaji logistics"},
              {"label": "operator_name", "pattern": "shivaji maharaj logistics"},
              
              
              
              {"label": "operation_status", "pattern": "delayed"},
              {"label": "operation_status", "pattern": "arrived"}, {"label": "operation_status", "pattern": "started"},
              {"label": "operation_status", "pattern": "transit"},
              
              {"label": "source", "pattern": "visakhapatnam"}, {"label": "source", "pattern": "vijayawada"},
              {"label": "source", "pattern": "india"}, {"label": "source", "pattern": "gudivada"},
              {"label": "source", "pattern": "guntur"},{"label": "source", "pattern": "chennai"},
              
              {"label": "destination", "pattern": "tirupati"}, {"label": "destination", "pattern": "srilanka"},
              {"label": "destination", "pattern": "nellore"},{"label": "destination", "pattern": "usa"},
              {"label": "destination", "pattern": "saudi arab"},
                  
              {"label": "track_id", "pattern": "hd3559"},{"label": "track_id", "pattern": "ba1254"},
              {"label": "track_id", "pattern": "ba1265"},{"label": "track_id", "pattern": "ba1256"},
              {"label": "track_id", "pattern": "in2568"},{"label": "track_id", "pattern": "in2578"},
              {"label": "track_id", "pattern": "ba1262"},{"label": "track_id", "pattern": "sm1255"},
              {"label": "track_id", "pattern": "hd3565"},{"label": "track_id", "pattern": "hd3569"},
              
              {"label": "TOTAL", "pattern": "Total"}, {"label": "TOTAL", "pattern": "total"},
              {"label": "List", "pattern": "list"}, {"label": "List", "pattern": "List"},


              {"label": "capacity", "pattern": "25000"}, {"label": "capacity", "pattern": "21600"},
              {"label": "capacity", "pattern": "250"},{"label": "capacity", "pattern": "320"},{"label": "capacity", "pattern": "280"},

              {"label": "greater", "pattern": "greater than"},{"label": "less", "pattern": "less than"},{"label": "equal", "pattern": "equal to"}

              ]
    # add the rules to NLP engine
  ruler1.add_patterns(pattern1)
  nlp.add_pipe(ruler1, before='ner')
  return nlp

def convert_text_sql(text):
  nlp = initialize()
  doc = nlp(text)
  query = u''
  for token in doc:
    print(token, token.pos_)
  # Understanding the context : Named entities
  for ent in doc.ents:
    print(ent.text, '--->', ent.label_, spacy.explain(ent.label_))
  html = displacy.render(doc, style = 'ent')
  display(HTML(html))

  for ent in doc.ents:
    print(ent.text, ent.label_)
    exp = ent.text
    exp = exp.lower()
    if ent.label_ == "FLEET":
      for e in doc.ents:
        if e.label_=="List":
          query = 'select * from FLEET'
          for e in doc.ents:
            if e.label_=="status":
              ex = e.text
              
              query = 'select * from FLEET where status = '+'\'' + ex + '\''

              
            elif e.label_=="fleet_type":
              ex = e.text
              query = 'select * from FLEET where fleet_type = '+'\'' + ex + '\''
              return query

    if ent.label_=="FLEET_id":
      for e in doc.ents:
        if e.label_=="operator_name":
          ex = e.text
          query = 'select fleet_id,operator_name from FLEET where operator_name = '+'\'' + ex + '\''
          return query
    
    if ent.label_=="greater":
      for e in doc.ents:
        if e.label_=="FLEET":
          for e in doc.ents:
            if e.label_=="operator_name":
              ex = e.text
              query = 'select * from FLEET where capacity > (select capacity from fleet where operator_name ='+'\'' + ex + '\')'
              return query

    if ent.label_=="TRACK":
      for e in doc.ents:
        if e.label_=="List":
          query = 'select * from track'
          for e in doc.ents:
            if e.label_=="operation_status":
              
              ex = e.text
              query = 'select * from track where operation_status = '+'\'' + ex + '\''
              
            elif e.label_=="source":
              ex = e.text
              query = 'select * from track where source = '+'\'' + ex + '\''
              
            elif e.label_=="destination":
              ex = e.text
              query = 'select * from track where destination = '+'\'' + ex + '\''
              return query

        elif e.label_=="TRACK_col":
          for e in doc.ents:
            if e.label_=="track_id":
              ex = e.text
              query = 'select * from track where track_id = '+'\'' + ex + '\''
              return query
  return query

'''
text = 'List of all packages'
print(text)
sqltext = convert_text_sql(text)
sqltext
'''